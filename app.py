import os
import logging
from flask import Flask, request, jsonify
import requests
from threading import Timer
import redis
from dotenv import load_dotenv
import subprocess

load_dotenv() # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env


app = Flask(__name__)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DELAY = int(os.getenv('DELAY', 300))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
try:
    redis_client = redis.StrictRedis(host='redis', port=6379, db=0, decode_responses=True)
    if redis_client.ping():
        logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ Redis")
except redis.ConnectionError as e:
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ Redis")

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=data)
        response_json = response.json()
        if response.status_code == 200 and response_json.get("ok"): # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return response_json
        else: # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response_json.get('description')}")
            return None
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–æ—à–∏–±–æ–∫ —Å–µ—Ç–∏, –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—á–µ–µ)
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def delete_message_after_delay(message_id, event_id, delay=DELAY):
    redis_client.set(f"timer_{event_id}", delay) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    Timer(delay, lambda: delete_message(message_id)).start()
    Timer(delay + 10, lambda: delete_event_from_messages(event_id)).start()

def delete_message(message_id):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteMessage"
    data = {
        "chat_id": CHAT_ID,
        "message_id": message_id
    }
    response = requests.post(url, data=data)    
    if response.status_code == 200:
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {response.text}")

def delete_event_from_messages(event_id, delay=DELAY):
    if redis_client.exists(f"message_{event_id}"):
        redis_client.delete(f"message_{event_id}")
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_id} –∏–∑ redis –ø–æ—Å–ª–µ {delay + 10} —Å–µ–∫—É–Ω–¥")
    if redis_client.exists(f"timer_{event_id}"):
        redis_client.delete(f"timer_{event_id}")
        logging.info(f"–£–¥–∞–ª–µ–Ω —Ç–∞–π–º–µ—Ä {event_id} –∏–∑ redis –ø–æ—Å–ª–µ {delay + 10} —Å–µ–∫—É–Ω–¥")

def check_pending_timers():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
    keys = redis_client.keys('timer_*')
    for key in keys:
        event_id = key.split('_')[1]
        remaining_time = redis_client.get(key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ Redis —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_id = redis_client.get(f"message_{event_id}")
        if message_id:
            logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥")
            delete_message_after_delay(message_id, event_id, int(remaining_time))

@app.route('/notify', methods=['POST'])
def notify():
    data = request.json.get('monitorJSON', {})
    text = data.get('text', '')

    logging.info(f"Received JSON: {request.json}")

    lines = text.split('\n')
    if len(lines) < 2:
        return jsonify({"status": "error", "message": "Invalid message format"}), 400

    subject = lines[0].strip().lower()
    message_body = '\n'.join(lines[1:]).strip()

    if 'problem' in subject: 
        trigger_name, host_name, host_ip, severity, event_time, last_value, event_id = parse_message_body(message_body)
        message = f"üö® <b>–ü–†–û–ë–õ–ï–ú–ê</b>: {trigger_name} <b>–ù–ê</b> {host_name} üö®\n\n" \
                  f"–•–æ—Å—Ç: {host_ip}\n" \
                  f"–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å: {severity}\n" \
                  f"–î–∞—Ç–∞/–í—Ä–µ–º—è: {event_time}\n" \
                  f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {last_value}\n\n" \
                  f"üìç <b>–ù–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã</b>: {event_id}"
        response = send_telegram_message(message)
        if response:
            message_id = response.get("result", {}).get("message_id")
            if message_id:
                redis_client.set(f"message_{event_id}", message_id)
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis: event_id={event_id}, message_id={message_id}")
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å message_id –æ—Ç Telegram –¥–ª—è event_id={event_id}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è event_id={event_id}")

    elif 'update' in subject: 
        user, action, event_message, host_ip, severity, event_time, last_value, event_age, event_id = parse_update_message(message_body)
        message_id = redis_client.get(f"message_{event_id}")
        if message_id:
            logging.info(f"Found message_id: {message_id} for event_id: {event_id}")
            message = f"üîÑ <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï</b>: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user}</b> –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ <b>{action}</b>\n\n" \
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {event_message}\n" \
                    f"–•–æ—Å—Ç: {host_ip}\n" \
                    f"–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å: {severity}\n" \
                    f"–î–∞—Ç–∞/–í—Ä–µ–º—è: {event_time}\n" \
                    f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {last_value}\n" \
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {event_age}\n\n" \
                    f"üìç <b>–ù–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã</b>: {event_id}"
            delete_message(message_id) 
            response = send_telegram_message(message)
        if response:
            message_id = response.get("result", {}).get("message_id")
            if message_id:
                redis_client.set(f"message_{event_id}", message_id)
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis: event_id={event_id}, message_id={message_id}")
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å message_id –æ—Ç Telegram –¥–ª—è event_id={event_id}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è event_id={event_id}")

    elif 'recovery' in subject: 
        trigger_name, host_name, host_ip, recovery_time, event_age, event_id = parse_message_body(message_body, recovery=True)
        message_id = redis_client.get(f"message_{event_id}")
        if message_id:
            logging.info(f"Found message_id: {message_id} for event_id: {event_id}")
            message = f"‚úÖ <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û</b>: {trigger_name} <b>–ù–ê</b> {host_name} ‚úÖ\n\n" \
                      f"–•–æ—Å—Ç: {host_ip}\n" \
                      f"–î–∞—Ç–∞/–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_time}\n" \
                      f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {event_age}\n\n" \
                      f"üìç <b>–ù–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã</b>: {event_id}\n\n" \
                      f"üëç –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞."
            delete_message(message_id)
            response = send_telegram_message(message)
        if response:
            message_id = response.get("result", {}).get("message_id")
            if message_id:
                redis_client.set(f"message_{event_id}", message_id)
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis: event_id={event_id}, message_id={message_id}")
                delete_message_after_delay(message_id, event_id)
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å message_id –æ—Ç Telegram –¥–ª—è event_id={event_id}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è event_id={event_id}")

    return jsonify({"status": "success"})

@app.route('/notify', methods=['POST'])
def notify():
    data = request.json.get('monitorJSON', {})
    text = data.get('text', '')

    logging.info(f"Received JSON: {request.json}")

    lines = text.split('\n')
    if len(lines) < 2:
        return jsonify({"status": "error", "message": "Invalid message format"}), 400

    subject = lines[0].strip().lower()
    message_body = '\n'.join(lines[1:]).strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if 'ping' in subject or 'traceroute' in subject:
        command_type, host_ip = parse_message_body(message_body)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è parse_command –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ IP
        if command_type and host_ip:
            if command_type == 'ping':
                result = execute_command(f'ping -c 4 {host_ip}')
            elif command_type == 'traceroute':
                result = execute_command(f'traceroute {host_ip}')
            else:
                result = {"status": "error", "message": "Unsupported command."}

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
            message = f"–ö–æ–º–∞–Ω–¥–∞: {command_type}\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.get('output', result.get('message'))}"
            send_telegram_message(message)
            return jsonify({"status": "success"}), 200


def execute_command(command):
    """ –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. """
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
        return {"status": "success", "output": output.decode()}
    except subprocess.CalledProcessError as e:
        return {"status": "error", "message": e.output.decode()}
    
def is_valid_ip(ip):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–º IP-–∞–¥—Ä–µ—Å–æ–º. """
    import re
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP-–∞–¥—Ä–µ—Å–∞
    pattern = re.compile(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
    return pattern.match(ip) is not None

def parse_message_body(body, recovery=False):
    lines = body.split('\r\n')
    if not recovery:
        trigger_name = lines[0].split(': ')[1]
        host_name = lines[1].split(': ')[1]
        host_ip = lines[2].split(': ')[1]
        severity = lines[3].split(': ')[1]
        event_time = lines[4].split(': ')[1]
        last_value = lines[5].split(': ')[1]
        event_id = lines[6].split(': ')[1]
        return trigger_name, host_name, host_ip, severity, event_time, last_value, event_id
    else:
        trigger_name = lines[0].split(': ')[1]
        host_name = lines[1].split(': ')[1]
        host_ip = lines[2].split(': ')[1]
        recovery_time = lines[3].split(': ')[1]
        event_age = lines[4].split(': ')[1]
        event_id = lines[5].split(': ')[1]
        return trigger_name, host_name, host_ip, recovery_time, event_age, event_id

def parse_update_message(body):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    lines = body.split('\r\n')
    user = lines[0].split(': ')[1]
    action = lines[1].split(': ')[1]
    event_message = lines[2].split(': ')[1]
    host_ip = lines[3].split(': ')[1]
    severity = lines[4].split(': ')[1]
    event_time = lines[5].split(': ')[1]
    last_value = lines[6].split(': ')[1]
    event_age = lines[7].split(': ')[1]
    event_id = lines[8].split(': ')[1]
    return user, action, event_message, host_ip, severity, event_time, last_value, event_age, event_id

if __name__ == '__main__':
    check_pending_timers()
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π delay —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {DELAY} —Å–µ–∫—É–Ω–¥")
    app.run(host='0.0.0.0', port=5000)